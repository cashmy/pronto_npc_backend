# d:\Python-Django\pronto_npc_backend\character_sub_group\serializers.py
from rest_framework import serializers
from .models import CharacterSubGroup

# Optional: Import CharacterGroupSerializer if you want to nest it
# from character_group.serializers import CharacterGroupSerializer


class CharacterSubGroupSerializer(serializers.ModelSerializer):
    """
    Serializer for the CharacterSubGroup model.
    """

    # Display the related group's name (using its short name if available)
    character_group_display_name = serializers.SerializerMethodField()
    # Display the related system's name via the parent group
    npc_system_name = serializers.CharField(
        source="character_group.npc_system.npc_system_name", read_only=True
    )

    class Meta:
        model = CharacterSubGroup
        fields = [
            "id",
            "character_group",  # Foreign key ID (writable)
            "character_group_display_name",  # Parent group's display name (read-only)
            "npc_system_name",  # Grandparent system's name (read-only)
            "character_sub_group_name",
            "character_sub_group_short_name",
            "description",
            "created_at",
            "updated_at",
        ]
        read_only_fields = [
            "id",
            "character_group_display_name",  # Read-only as it's derived
            "npc_system_name",  # Read-only as it's derived
            "created_at",
            "updated_at",
            # 'character_sub_group_short_name', # Keep writable if users can override,
            # or make read-only if it's always auto-generated by the model's save()
        ]
        extra_kwargs = {
            # Make the 'character_group' ID field write-only in the API representation,
            # as we display 'character_group_display_name' for reading.
            "character_group": {"write_only": True}
        }

    def get_character_group_display_name(self, obj):
        """
        Returns the short name of the parent CharacterGroup if it exists,
        otherwise returns the full name.
        """
        group = obj.character_group
        if group:
            return (
                group.character_group_short_name
                if group.character_group_short_name
                else group.character_group_name
            )
        return None  # Or handle as appropriate if group might be missing (though FK implies it shouldn't be)

    # No custom 'create' or 'validate' methods are needed here unless you have
    # specific logic for CharacterSubGroup. The default short_name logic in the
    # model's save() method will be handled automatically.
