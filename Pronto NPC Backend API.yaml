openapi: 3.0.3
info:
  title: Pronto NPC Backend API
  version: 1.0.0
  description: API for the Pronto NPC Backend application
paths:
  /api/age_category/:
    get:
      operationId: api_age_category_retrieve
      tags:
      - api
      security:
      - jwtHeaderAuth: []
      - jwtCookieAuth: []
      - jwtAuth: []
      responses:
        '200':
          description: No response body
    post:
      operationId: api_age_category_create
      tags:
      - api
      security:
      - jwtHeaderAuth: []
      - jwtCookieAuth: []
      - jwtAuth: []
      responses:
        '200':
          description: No response body
  /api/age_category/{id}:
    get:
      operationId: api_age_category_retrieve_2
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - api
      security:
      - jwtHeaderAuth: []
      - jwtCookieAuth: []
      - jwtAuth: []
      responses:
        '200':
          description: No response body
    put:
      operationId: api_age_category_update
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - api
      security:
      - jwtHeaderAuth: []
      - jwtCookieAuth: []
      - jwtAuth: []
      responses:
        '200':
          description: No response body
    patch:
      operationId: api_age_category_partial_update
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - api
      security:
      - jwtHeaderAuth: []
      - jwtCookieAuth: []
      - jwtAuth: []
      responses:
        '200':
          description: No response body
    delete:
      operationId: api_age_category_destroy
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - api
      security:
      - jwtHeaderAuth: []
      - jwtCookieAuth: []
      - jwtAuth: []
      responses:
        '204':
          description: No response body
  /api/age_category/options/:
    get:
      operationId: api_age_category_options_retrieve
      tags:
      - api
      security:
      - jwtHeaderAuth: []
      - jwtCookieAuth: []
      - jwtAuth: []
      responses:
        '200':
          description: No response body
  /api/archetype/:
    get:
      operationId: api_archetype_retrieve
      tags:
      - api
      security:
      - jwtHeaderAuth: []
      - jwtCookieAuth: []
      - jwtAuth: []
      responses:
        '200':
          description: No response body
    post:
      operationId: api_archetype_create
      tags:
      - api
      security:
      - jwtHeaderAuth: []
      - jwtCookieAuth: []
      - jwtAuth: []
      responses:
        '200':
          description: No response body
  /api/archetype/{id}:
    get:
      operationId: api_archetype_retrieve_2
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - api
      security:
      - jwtHeaderAuth: []
      - jwtCookieAuth: []
      - jwtAuth: []
      responses:
        '200':
          description: No response body
    put:
      operationId: api_archetype_update
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - api
      security:
      - jwtHeaderAuth: []
      - jwtCookieAuth: []
      - jwtAuth: []
      responses:
        '200':
          description: No response body
    patch:
      operationId: api_archetype_partial_update
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - api
      security:
      - jwtHeaderAuth: []
      - jwtCookieAuth: []
      - jwtAuth: []
      responses:
        '200':
          description: No response body
    delete:
      operationId: api_archetype_destroy
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - api
      security:
      - jwtHeaderAuth: []
      - jwtCookieAuth: []
      - jwtAuth: []
      responses:
        '204':
          description: No response body
  /api/archetype/by_expansion/:
    get:
      operationId: api_archetype_by_expansion_retrieve
      description: |-
        Returns a list of archetypes filtered by the 'expansion' flag.
        Use query parameter 'status' (e.g., ?status=true or ?status=false).
        Defaults to false if the parameter is missing or invalid.
      tags:
      - api
      security:
      - jwtHeaderAuth: []
      - jwtCookieAuth: []
      - jwtAuth: []
      responses:
        '200':
          description: No response body
  /api/character_group/:
    get:
      operationId: api_character_group_retrieve
      tags:
      - api
      security:
      - jwtHeaderAuth: []
      - jwtCookieAuth: []
      - jwtAuth: []
      responses:
        '200':
          description: No response body
    post:
      operationId: api_character_group_create
      tags:
      - api
      security:
      - jwtHeaderAuth: []
      - jwtCookieAuth: []
      - jwtAuth: []
      responses:
        '200':
          description: No response body
  /api/character_group/{id}:
    get:
      operationId: api_character_group_retrieve_2
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - api
      security:
      - jwtHeaderAuth: []
      - jwtCookieAuth: []
      - jwtAuth: []
      responses:
        '200':
          description: No response body
    put:
      operationId: api_character_group_update
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - api
      security:
      - jwtHeaderAuth: []
      - jwtCookieAuth: []
      - jwtAuth: []
      responses:
        '200':
          description: No response body
    patch:
      operationId: api_character_group_partial_update
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - api
      security:
      - jwtHeaderAuth: []
      - jwtCookieAuth: []
      - jwtAuth: []
      responses:
        '200':
          description: No response body
    delete:
      operationId: api_character_group_destroy
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - api
      security:
      - jwtHeaderAuth: []
      - jwtCookieAuth: []
      - jwtAuth: []
      responses:
        '204':
          description: No response body
  /api/character_group/system/{npc_system_id}:
    get:
      operationId: api_character_group_system_retrieve
      description: Returns a list of character groups filtered by the provided npc_system_id.
      parameters:
      - in: path
        name: npc_system_id
        schema:
          type: integer
        required: true
      tags:
      - api
      security:
      - jwtHeaderAuth: []
      - jwtCookieAuth: []
      - jwtAuth: []
      responses:
        '200':
          description: No response body
  /api/character_images/:
    get:
      operationId: api_character_images_retrieve
      description: List all character images or create a new character image.
      tags:
      - api
      security:
      - jwtHeaderAuth: []
      - jwtCookieAuth: []
      - jwtAuth: []
      responses:
        '200':
          description: No response body
    post:
      operationId: api_character_images_create
      description: List all character images or create a new character image.
      tags:
      - api
      security:
      - jwtHeaderAuth: []
      - jwtCookieAuth: []
      - jwtAuth: []
      responses:
        '200':
          description: No response body
  /api/character_images/{id}/:
    get:
      operationId: api_character_images_retrieve_2
      description: Retrieve, update or delete a character image.
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - api
      security:
      - jwtHeaderAuth: []
      - jwtCookieAuth: []
      - jwtAuth: []
      responses:
        '200':
          description: No response body
    put:
      operationId: api_character_images_update
      description: Retrieve, update or delete a character image.
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - api
      security:
      - jwtHeaderAuth: []
      - jwtCookieAuth: []
      - jwtAuth: []
      responses:
        '200':
          description: No response body
    patch:
      operationId: api_character_images_partial_update
      description: Retrieve, update or delete a character image.
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - api
      security:
      - jwtHeaderAuth: []
      - jwtCookieAuth: []
      - jwtAuth: []
      responses:
        '200':
          description: No response body
    delete:
      operationId: api_character_images_destroy
      description: Retrieve, update or delete a character image.
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - api
      security:
      - jwtHeaderAuth: []
      - jwtCookieAuth: []
      - jwtAuth: []
      responses:
        '204':
          description: No response body
  /api/character_sub_group/:
    get:
      operationId: api_character_sub_group_retrieve
      tags:
      - api
      security:
      - jwtHeaderAuth: []
      - jwtCookieAuth: []
      - jwtAuth: []
      responses:
        '200':
          description: No response body
    post:
      operationId: api_character_sub_group_create
      tags:
      - api
      security:
      - jwtHeaderAuth: []
      - jwtCookieAuth: []
      - jwtAuth: []
      responses:
        '200':
          description: No response body
  /api/character_sub_group/{id}:
    get:
      operationId: api_character_sub_group_retrieve_2
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - api
      security:
      - jwtHeaderAuth: []
      - jwtCookieAuth: []
      - jwtAuth: []
      responses:
        '200':
          description: No response body
    put:
      operationId: api_character_sub_group_update
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - api
      security:
      - jwtHeaderAuth: []
      - jwtCookieAuth: []
      - jwtAuth: []
      responses:
        '200':
          description: No response body
    patch:
      operationId: api_character_sub_group_partial_update
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - api
      security:
      - jwtHeaderAuth: []
      - jwtCookieAuth: []
      - jwtAuth: []
      responses:
        '200':
          description: No response body
    delete:
      operationId: api_character_sub_group_destroy
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - api
      security:
      - jwtHeaderAuth: []
      - jwtCookieAuth: []
      - jwtAuth: []
      responses:
        '204':
          description: No response body
  /api/character_sub_group/system/{npc_system_id}:
    get:
      operationId: api_character_sub_group_system_retrieve
      description: |-
        Returns a list of character sub-groups filtered by the provided npc_system_id
        (via the parent CharacterGroup).
      parameters:
      - in: path
        name: npc_system_id
        schema:
          type: integer
        required: true
      tags:
      - api
      security:
      - jwtHeaderAuth: []
      - jwtCookieAuth: []
      - jwtAuth: []
      responses:
        '200':
          description: No response body
  /api/character_sub_group/system/{npc_system_id}/{character_group_id}:
    get:
      operationId: api_character_sub_group_system_retrieve_2
      description: |-
        Returns a list of character sub-groups filtered by both the provided
        npc_system_id and character_group_id.
      parameters:
      - in: path
        name: character_group_id
        schema:
          type: integer
        required: true
      - in: path
        name: npc_system_id
        schema:
          type: integer
        required: true
      tags:
      - api
      security:
      - jwtHeaderAuth: []
      - jwtCookieAuth: []
      - jwtAuth: []
      responses:
        '200':
          description: No response body
  /api/characters/:
    get:
      operationId: api_characters_retrieve
      description: List all characters or create a new character.
      tags:
      - api
      security:
      - jwtHeaderAuth: []
      - jwtCookieAuth: []
      - jwtAuth: []
      responses:
        '200':
          description: No response body
    post:
      operationId: api_characters_create
      description: List all characters or create a new character.
      tags:
      - api
      security:
      - jwtHeaderAuth: []
      - jwtCookieAuth: []
      - jwtAuth: []
      responses:
        '200':
          description: No response body
  /api/characters/{id}:
    get:
      operationId: api_characters_retrieve_2
      description: Retrieve, update or delete a character.
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - api
      security:
      - jwtHeaderAuth: []
      - jwtCookieAuth: []
      - jwtAuth: []
      responses:
        '200':
          description: No response body
    put:
      operationId: api_characters_update
      description: Retrieve, update or delete a character.
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - api
      security:
      - jwtHeaderAuth: []
      - jwtCookieAuth: []
      - jwtAuth: []
      responses:
        '200':
          description: No response body
    patch:
      operationId: api_characters_partial_update
      description: Retrieve, update or delete a character.
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - api
      security:
      - jwtHeaderAuth: []
      - jwtCookieAuth: []
      - jwtAuth: []
      responses:
        '200':
          description: No response body
    delete:
      operationId: api_characters_destroy
      description: Retrieve, update or delete a character.
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - api
      security:
      - jwtHeaderAuth: []
      - jwtCookieAuth: []
      - jwtAuth: []
      responses:
        '204':
          description: No response body
  /api/genre/:
    get:
      operationId: api_genre_retrieve
      tags:
      - api
      security:
      - jwtHeaderAuth: []
      - jwtCookieAuth: []
      - jwtAuth: []
      responses:
        '200':
          description: No response body
    post:
      operationId: api_genre_create
      tags:
      - api
      security:
      - jwtHeaderAuth: []
      - jwtCookieAuth: []
      - jwtAuth: []
      responses:
        '200':
          description: No response body
  /api/genre/{id}:
    get:
      operationId: api_genre_retrieve_2
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - api
      security:
      - jwtHeaderAuth: []
      - jwtCookieAuth: []
      - jwtAuth: []
      responses:
        '200':
          description: No response body
    put:
      operationId: api_genre_update
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - api
      security:
      - jwtHeaderAuth: []
      - jwtCookieAuth: []
      - jwtAuth: []
      responses:
        '200':
          description: No response body
    patch:
      operationId: api_genre_partial_update
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - api
      security:
      - jwtHeaderAuth: []
      - jwtCookieAuth: []
      - jwtAuth: []
      responses:
        '200':
          description: No response body
    delete:
      operationId: api_genre_destroy
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - api
      security:
      - jwtHeaderAuth: []
      - jwtCookieAuth: []
      - jwtAuth: []
      responses:
        '204':
          description: No response body
  /api/images/:
    get:
      operationId: api_images_retrieve
      tags:
      - api
      security:
      - jwtHeaderAuth: []
      - jwtCookieAuth: []
      - jwtAuth: []
      - {}
      responses:
        '200':
          description: No response body
    post:
      operationId: api_images_create
      tags:
      - api
      security:
      - jwtHeaderAuth: []
      - jwtCookieAuth: []
      - jwtAuth: []
      - {}
      responses:
        '200':
          description: No response body
  /api/images/{id}:
    get:
      operationId: api_images_retrieve_2
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - api
      security:
      - jwtHeaderAuth: []
      - jwtCookieAuth: []
      - jwtAuth: []
      - {}
      responses:
        '200':
          description: No response body
    put:
      operationId: api_images_update
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - api
      security:
      - jwtHeaderAuth: []
      - jwtCookieAuth: []
      - jwtAuth: []
      - {}
      responses:
        '200':
          description: No response body
    patch:
      operationId: api_images_partial_update
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - api
      security:
      - jwtHeaderAuth: []
      - jwtCookieAuth: []
      - jwtAuth: []
      - {}
      responses:
        '200':
          description: No response body
    delete:
      operationId: api_images_destroy
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - api
      security:
      - jwtHeaderAuth: []
      - jwtCookieAuth: []
      - jwtAuth: []
      - {}
      responses:
        '204':
          description: No response body
  /api/npc_system/:
    get:
      operationId: api_npc_system_retrieve
      tags:
      - api
      security:
      - jwtHeaderAuth: []
      - jwtCookieAuth: []
      - jwtAuth: []
      responses:
        '200':
          description: No response body
    post:
      operationId: api_npc_system_create
      tags:
      - api
      security:
      - jwtHeaderAuth: []
      - jwtCookieAuth: []
      - jwtAuth: []
      responses:
        '200':
          description: No response body
  /api/npc_system/{id}:
    get:
      operationId: api_npc_system_retrieve_2
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - api
      security:
      - jwtHeaderAuth: []
      - jwtCookieAuth: []
      - jwtAuth: []
      responses:
        '200':
          description: No response body
    put:
      operationId: api_npc_system_update
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - api
      security:
      - jwtHeaderAuth: []
      - jwtCookieAuth: []
      - jwtAuth: []
      responses:
        '200':
          description: No response body
    patch:
      operationId: api_npc_system_partial_update
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - api
      security:
      - jwtHeaderAuth: []
      - jwtCookieAuth: []
      - jwtAuth: []
      responses:
        '200':
          description: No response body
    delete:
      operationId: api_npc_system_destroy
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - api
      security:
      - jwtHeaderAuth: []
      - jwtCookieAuth: []
      - jwtAuth: []
      responses:
        '204':
          description: No response body
  /api/npc_system_professions/:
    get:
      operationId: api_npc_system_professions_retrieve
      tags:
      - api
      security:
      - jwtHeaderAuth: []
      - jwtCookieAuth: []
      - jwtAuth: []
      responses:
        '200':
          description: No response body
    post:
      operationId: api_npc_system_professions_create
      tags:
      - api
      security:
      - jwtHeaderAuth: []
      - jwtCookieAuth: []
      - jwtAuth: []
      responses:
        '200':
          description: No response body
  /api/npc_system_professions/{id}:
    get:
      operationId: api_npc_system_professions_retrieve_2
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - api
      security:
      - jwtHeaderAuth: []
      - jwtCookieAuth: []
      - jwtAuth: []
      responses:
        '200':
          description: No response body
    put:
      operationId: api_npc_system_professions_update
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - api
      security:
      - jwtHeaderAuth: []
      - jwtCookieAuth: []
      - jwtAuth: []
      responses:
        '200':
          description: No response body
    patch:
      operationId: api_npc_system_professions_partial_update
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - api
      security:
      - jwtHeaderAuth: []
      - jwtCookieAuth: []
      - jwtAuth: []
      responses:
        '200':
          description: No response body
    delete:
      operationId: api_npc_system_professions_destroy
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - api
      security:
      - jwtHeaderAuth: []
      - jwtCookieAuth: []
      - jwtAuth: []
      responses:
        '204':
          description: No response body
  /api/npc_system_professions/options/:
    get:
      operationId: api_npc_system_professions_options_retrieve
      tags:
      - api
      security:
      - jwtHeaderAuth: []
      - jwtCookieAuth: []
      - jwtAuth: []
      responses:
        '200':
          description: No response body
  /api/npc_system_races/:
    get:
      operationId: api_npc_system_races_retrieve
      tags:
      - api
      security:
      - jwtHeaderAuth: []
      - jwtCookieAuth: []
      - jwtAuth: []
      responses:
        '200':
          description: No response body
    post:
      operationId: api_npc_system_races_create
      tags:
      - api
      security:
      - jwtHeaderAuth: []
      - jwtCookieAuth: []
      - jwtAuth: []
      responses:
        '200':
          description: No response body
  /api/npc_system_races/{id}:
    get:
      operationId: api_npc_system_races_retrieve_2
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - api
      security:
      - jwtHeaderAuth: []
      - jwtCookieAuth: []
      - jwtAuth: []
      responses:
        '200':
          description: No response body
    put:
      operationId: api_npc_system_races_update
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - api
      security:
      - jwtHeaderAuth: []
      - jwtCookieAuth: []
      - jwtAuth: []
      responses:
        '200':
          description: No response body
    patch:
      operationId: api_npc_system_races_partial_update
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - api
      security:
      - jwtHeaderAuth: []
      - jwtCookieAuth: []
      - jwtAuth: []
      responses:
        '200':
          description: No response body
    delete:
      operationId: api_npc_system_races_destroy
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - api
      security:
      - jwtHeaderAuth: []
      - jwtCookieAuth: []
      - jwtAuth: []
      responses:
        '204':
          description: No response body
  /api/npc_system_races/options/:
    get:
      operationId: api_npc_system_races_options_retrieve
      tags:
      - api
      security:
      - jwtHeaderAuth: []
      - jwtCookieAuth: []
      - jwtAuth: []
      responses:
        '200':
          description: No response body
  /api/npc_system_rpg_classes/:
    get:
      operationId: api_npc_system_rpg_classes_retrieve
      tags:
      - api
      security:
      - jwtHeaderAuth: []
      - jwtCookieAuth: []
      - jwtAuth: []
      responses:
        '200':
          description: No response body
    post:
      operationId: api_npc_system_rpg_classes_create
      tags:
      - api
      security:
      - jwtHeaderAuth: []
      - jwtCookieAuth: []
      - jwtAuth: []
      responses:
        '200':
          description: No response body
  /api/npc_system_rpg_classes/{id}:
    get:
      operationId: api_npc_system_rpg_classes_retrieve_2
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - api
      security:
      - jwtHeaderAuth: []
      - jwtCookieAuth: []
      - jwtAuth: []
      responses:
        '200':
          description: No response body
    put:
      operationId: api_npc_system_rpg_classes_update
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - api
      security:
      - jwtHeaderAuth: []
      - jwtCookieAuth: []
      - jwtAuth: []
      responses:
        '200':
          description: No response body
    patch:
      operationId: api_npc_system_rpg_classes_partial_update
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - api
      security:
      - jwtHeaderAuth: []
      - jwtCookieAuth: []
      - jwtAuth: []
      responses:
        '200':
          description: No response body
    delete:
      operationId: api_npc_system_rpg_classes_destroy
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - api
      security:
      - jwtHeaderAuth: []
      - jwtCookieAuth: []
      - jwtAuth: []
      responses:
        '204':
          description: No response body
  /api/npc_system_rpg_classes/options/:
    get:
      operationId: api_npc_system_rpg_classes_options_retrieve
      tags:
      - api
      security:
      - jwtHeaderAuth: []
      - jwtCookieAuth: []
      - jwtAuth: []
      responses:
        '200':
          description: No response body
  /api/profiles/:
    get:
      operationId: api_profiles_retrieve
      description: |-
        List all profiles.
        Note: Profile creation is usually handled during user registration.
      tags:
      - api
      security:
      - jwtHeaderAuth: []
      - jwtCookieAuth: []
      - jwtAuth: []
      responses:
        '200':
          description: No response body
  /api/profiles/{id}:
    get:
      operationId: api_profiles_retrieve_2
      description: Retrieve, update, partially update, or delete a profile by its
        PK.
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - api
      security:
      - jwtHeaderAuth: []
      - jwtCookieAuth: []
      - jwtAuth: []
      responses:
        '200':
          description: No response body
    put:
      operationId: api_profiles_update
      description: Retrieve, update, partially update, or delete a profile by its
        PK.
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - api
      security:
      - jwtHeaderAuth: []
      - jwtCookieAuth: []
      - jwtAuth: []
      responses:
        '200':
          description: No response body
    patch:
      operationId: api_profiles_partial_update
      description: Retrieve, update, partially update, or delete a profile by its
        PK.
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - api
      security:
      - jwtHeaderAuth: []
      - jwtCookieAuth: []
      - jwtAuth: []
      responses:
        '200':
          description: No response body
    delete:
      operationId: api_profiles_destroy
      description: Retrieve, update, partially update, or delete a profile by its
        PK.
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - api
      security:
      - jwtHeaderAuth: []
      - jwtCookieAuth: []
      - jwtAuth: []
      responses:
        '204':
          description: No response body
  /api/profiles/me/:
    get:
      operationId: api_profiles_me_retrieve
      description: Retrieve, update or partially update the profile of the currently
        authenticated user.
      tags:
      - api
      security:
      - jwtHeaderAuth: []
      - jwtCookieAuth: []
      - jwtAuth: []
      responses:
        '200':
          description: No response body
    put:
      operationId: api_profiles_me_update
      description: Retrieve, update or partially update the profile of the currently
        authenticated user.
      tags:
      - api
      security:
      - jwtHeaderAuth: []
      - jwtCookieAuth: []
      - jwtAuth: []
      responses:
        '200':
          description: No response body
    patch:
      operationId: api_profiles_me_partial_update
      description: Retrieve, update or partially update the profile of the currently
        authenticated user.
      tags:
      - api
      security:
      - jwtHeaderAuth: []
      - jwtCookieAuth: []
      - jwtAuth: []
      responses:
        '200':
          description: No response body
  /api/referrals/my-invite/:
    get:
      operationId: api_referrals_my_invite_retrieve
      description: |-
        Retrieves (or creates if not existing) the referral link
        for the currently authenticated user.
      tags:
      - api
      security:
      - jwtHeaderAuth: []
      - jwtCookieAuth: []
      - jwtAuth: []
      responses:
        '200':
          description: No response body
  /api/referrals/referred-users/:
    get:
      operationId: api_referrals_referred_users_retrieve
      description: |-
        Retrieves a list of users (profiles) who were referred by the
        currently authenticated user's email.
        Returns their email, first name, last name, and avatar.
      tags:
      - api
      security:
      - jwtHeaderAuth: []
      - jwtCookieAuth: []
      - jwtAuth: []
      responses:
        '200':
          description: No response body
  /api/subscriptions/{id}/admin-update/:
    put:
      operationId: api_subscriptions_admin_update_update
      description: |-
        Allows an admin to update (PUT) or partially update (PATCH) any subscription.
        Note: 'start_date' is auto_now_add and typically not updated.
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - api
      security:
      - jwtHeaderAuth: []
      - jwtCookieAuth: []
      - jwtAuth: []
      responses:
        '200':
          description: No response body
    patch:
      operationId: api_subscriptions_admin_update_partial_update
      description: |-
        Allows an admin to update (PUT) or partially update (PATCH) any subscription.
        Note: 'start_date' is auto_now_add and typically not updated.
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - api
      security:
      - jwtHeaderAuth: []
      - jwtCookieAuth: []
      - jwtAuth: []
      responses:
        '200':
          description: No response body
  /api/subscriptions/me/:
    get:
      operationId: api_subscriptions_me_retrieve
      description: Retrieves the subscription details for the currently authenticated
        user.
      tags:
      - api
      security:
      - jwtHeaderAuth: []
      - jwtCookieAuth: []
      - jwtAuth: []
      responses:
        '200':
          description: No response body
  /api/subscriptions/me/deactivate/:
    post:
      operationId: api_subscriptions_me_deactivate_create
      description: |-
        Deactivates the subscription for the currently authenticated user.
        Sets is_active to False and updates the end_date to now.
      tags:
      - api
      security:
      - jwtHeaderAuth: []
      - jwtCookieAuth: []
      - jwtAuth: []
      responses:
        '200':
          description: No response body
  /api/subscriptions/me/reactivate/:
    post:
      operationId: api_subscriptions_me_reactivate_create
      description: |-
        Reactivates the subscription for the currently authenticated user,
        if their plan is not 'basic'.
        Sets is_active to True, updates start_date to now, and end_date to 12 months from now.
      tags:
      - api
      security:
      - jwtHeaderAuth: []
      - jwtCookieAuth: []
      - jwtAuth: []
      responses:
        '200':
          description: No response body
  /api/subscriptions/upgrade/:
    post:
      operationId: api_subscriptions_upgrade_create
      description: Allows an authenticated user to change their subscription type.
      tags:
      - api
      security:
      - jwtHeaderAuth: []
      - jwtCookieAuth: []
      - jwtAuth: []
      responses:
        '200':
          description: No response body
  /api/table_group/:
    get:
      operationId: api_table_group_retrieve
      tags:
      - api
      security:
      - jwtHeaderAuth: []
      - jwtCookieAuth: []
      - jwtAuth: []
      responses:
        '200':
          description: No response body
    post:
      operationId: api_table_group_create
      tags:
      - api
      security:
      - jwtHeaderAuth: []
      - jwtCookieAuth: []
      - jwtAuth: []
      responses:
        '200':
          description: No response body
  /api/table_group/{id}:
    get:
      operationId: api_table_group_retrieve_2
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - api
      security:
      - jwtHeaderAuth: []
      - jwtCookieAuth: []
      - jwtAuth: []
      responses:
        '200':
          description: No response body
    put:
      operationId: api_table_group_update
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - api
      security:
      - jwtHeaderAuth: []
      - jwtCookieAuth: []
      - jwtAuth: []
      responses:
        '200':
          description: No response body
    patch:
      operationId: api_table_group_partial_update
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - api
      security:
      - jwtHeaderAuth: []
      - jwtCookieAuth: []
      - jwtAuth: []
      responses:
        '200':
          description: No response body
    delete:
      operationId: api_table_group_destroy
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - api
      security:
      - jwtHeaderAuth: []
      - jwtCookieAuth: []
      - jwtAuth: []
      responses:
        '204':
          description: No response body
  /api/table_group/system/{npc_system_id}:
    get:
      operationId: api_table_group_system_retrieve
      description: Returns a list of table groups filtered by the provided npc_system_id.
      parameters:
      - in: path
        name: npc_system_id
        schema:
          type: integer
        required: true
      tags:
      - api
      security:
      - jwtHeaderAuth: []
      - jwtCookieAuth: []
      - jwtAuth: []
      responses:
        '200':
          description: No response body
  /api/table_header/:
    get:
      operationId: api_table_header_retrieve
      tags:
      - api
      security:
      - jwtHeaderAuth: []
      - jwtCookieAuth: []
      - jwtAuth: []
      responses:
        '200':
          description: No response body
    post:
      operationId: api_table_header_create
      tags:
      - api
      security:
      - jwtHeaderAuth: []
      - jwtCookieAuth: []
      - jwtAuth: []
      responses:
        '200':
          description: No response body
  /api/table_header/{id}:
    get:
      operationId: api_table_header_retrieve_2
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - api
      security:
      - jwtHeaderAuth: []
      - jwtCookieAuth: []
      - jwtAuth: []
      responses:
        '200':
          description: No response body
    put:
      operationId: api_table_header_update
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - api
      security:
      - jwtHeaderAuth: []
      - jwtCookieAuth: []
      - jwtAuth: []
      responses:
        '200':
          description: No response body
    patch:
      operationId: api_table_header_partial_update
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - api
      security:
      - jwtHeaderAuth: []
      - jwtCookieAuth: []
      - jwtAuth: []
      responses:
        '200':
          description: No response body
    delete:
      operationId: api_table_header_destroy
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - api
      security:
      - jwtHeaderAuth: []
      - jwtCookieAuth: []
      - jwtAuth: []
      responses:
        '204':
          description: No response body
  /api/table_header/system/{npc_system_id}:
    get:
      operationId: api_table_header_system_retrieve
      description: Returns a list of table headers filtered by the provided npc_system_id.
      parameters:
      - in: path
        name: npc_system_id
        schema:
          type: integer
        required: true
      tags:
      - api
      security:
      - jwtHeaderAuth: []
      - jwtCookieAuth: []
      - jwtAuth: []
      responses:
        '200':
          description: No response body
  /api/table_header/system/{npc_system_id}/{table_group_id}:
    get:
      operationId: api_table_header_system_retrieve_2
      description: |-
        Returns a list of table headers filtered by both the provided
        npc_system_id and table_group_id.
      parameters:
      - in: path
        name: npc_system_id
        schema:
          type: integer
        required: true
      - in: path
        name: table_group_id
        schema:
          type: integer
        required: true
      tags:
      - api
      security:
      - jwtHeaderAuth: []
      - jwtCookieAuth: []
      - jwtAuth: []
      responses:
        '200':
          description: No response body
  /api/table_items/:
    get:
      operationId: api_table_items_retrieve
      tags:
      - api
      security:
      - jwtHeaderAuth: []
      - jwtCookieAuth: []
      - jwtAuth: []
      responses:
        '200':
          description: No response body
    post:
      operationId: api_table_items_create
      tags:
      - api
      security:
      - jwtHeaderAuth: []
      - jwtCookieAuth: []
      - jwtAuth: []
      responses:
        '200':
          description: No response body
  /api/table_items/{id}:
    get:
      operationId: api_table_items_retrieve_2
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - api
      security:
      - jwtHeaderAuth: []
      - jwtCookieAuth: []
      - jwtAuth: []
      responses:
        '200':
          description: No response body
    put:
      operationId: api_table_items_update
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - api
      security:
      - jwtHeaderAuth: []
      - jwtCookieAuth: []
      - jwtAuth: []
      responses:
        '200':
          description: No response body
    patch:
      operationId: api_table_items_partial_update
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - api
      security:
      - jwtHeaderAuth: []
      - jwtCookieAuth: []
      - jwtAuth: []
      responses:
        '200':
          description: No response body
    delete:
      operationId: api_table_items_destroy
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - api
      security:
      - jwtHeaderAuth: []
      - jwtCookieAuth: []
      - jwtAuth: []
      responses:
        '204':
          description: No response body
  /api/table_items/table_header/{table_header}:
    get:
      operationId: api_table_items_table_header_retrieve
      description: |-
        Returns a list of table headers filtered by both the provided
        npc_system_id and table_group_id.
      parameters:
      - in: path
        name: table_header
        schema:
          type: integer
        required: true
      tags:
      - api
      security:
      - jwtHeaderAuth: []
      - jwtCookieAuth: []
      - jwtAuth: []
      responses:
        '200':
          description: No response body
  /api/usage_tracking/:
    get:
      operationId: api_usage_tracking_retrieve
      description: |-
        List all usage tracking records.
        Note: Usage tracking creation is usually handled during user registration or activity.
      tags:
      - api
      security:
      - jwtHeaderAuth: []
      - jwtCookieAuth: []
      - jwtAuth: []
      responses:
        '200':
          description: No response body
  /api/usage_tracking/{id}:
    get:
      operationId: api_usage_tracking_retrieve_2
      description: Retrieve, update, partially update or delete a specific usage tracking
        record by its primary key.
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - api
      security:
      - jwtHeaderAuth: []
      - jwtCookieAuth: []
      - jwtAuth: []
      responses:
        '200':
          description: No response body
    put:
      operationId: api_usage_tracking_update
      description: Retrieve, update, partially update or delete a specific usage tracking
        record by its primary key.
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - api
      security:
      - jwtHeaderAuth: []
      - jwtCookieAuth: []
      - jwtAuth: []
      responses:
        '200':
          description: No response body
    patch:
      operationId: api_usage_tracking_partial_update
      description: Retrieve, update, partially update or delete a specific usage tracking
        record by its primary key.
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - api
      security:
      - jwtHeaderAuth: []
      - jwtCookieAuth: []
      - jwtAuth: []
      responses:
        '200':
          description: No response body
    delete:
      operationId: api_usage_tracking_destroy
      description: Retrieve, update, partially update or delete a specific usage tracking
        record by its primary key.
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - api
      security:
      - jwtHeaderAuth: []
      - jwtCookieAuth: []
      - jwtAuth: []
      responses:
        '204':
          description: No response body
  /api/usage_tracking/me/:
    get:
      operationId: api_usage_tracking_me_retrieve
      description: Retrieve, update or partially update the usage tracking of the
        currently authenticated user.
      tags:
      - api
      security:
      - jwtHeaderAuth: []
      - jwtCookieAuth: []
      - jwtAuth: []
      responses:
        '200':
          description: No response body
    put:
      operationId: api_usage_tracking_me_update
      description: Retrieve, update or partially update the usage tracking of the
        currently authenticated user.
      tags:
      - api
      security:
      - jwtHeaderAuth: []
      - jwtCookieAuth: []
      - jwtAuth: []
      responses:
        '200':
          description: No response body
    patch:
      operationId: api_usage_tracking_me_partial_update
      description: Retrieve, update or partially update the usage tracking of the
        currently authenticated user.
      tags:
      - api
      security:
      - jwtHeaderAuth: []
      - jwtCookieAuth: []
      - jwtAuth: []
      responses:
        '200':
          description: No response body
  /api/users/deactivate/:
    post:
      operationId: api_users_deactivate_create
      tags:
      - api
      security:
      - jwtHeaderAuth: []
      - jwtCookieAuth: []
      - jwtAuth: []
      responses:
        '200':
          description: No response body
  /api/users/debug/:
    get:
      operationId: api_users_debug_retrieve
      tags:
      - api
      security:
      - jwtHeaderAuth: []
      - jwtCookieAuth: []
      - jwtAuth: []
      responses:
        '200':
          description: No response body
  /api/users/login/:
    post:
      operationId: api_users_login_create
      description: 'Optional: Override if you want to trigger 2FA email OTP after
        login.'
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Login'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Login'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Login'
        required: true
      security:
      - jwtHeaderAuth: []
      - jwtCookieAuth: []
      - jwtAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Login'
          description: ''
  /api/users/logout/:
    post:
      operationId: api_users_logout_create
      description: |-
        Calls Django logout method and delete the Token object
        assigned to the current User object.

        Accepts/Returns nothing.
      tags:
      - api
      security:
      - jwtHeaderAuth: []
      - jwtCookieAuth: []
      - jwtAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestAuthDetail'
          description: ''
  /api/users/otp/verify/:
    post:
      operationId: api_users_otp_verify_create
      tags:
      - api
      security:
      - jwtHeaderAuth: []
      - jwtCookieAuth: []
      - jwtAuth: []
      responses:
        '200':
          description: No response body
  /api/users/password/change/:
    post:
      operationId: api_users_password_change_create
      description: |-
        Calls Django Auth SetPasswordForm save method.

        Accepts the following POST parameters: new_password1, new_password2
        Returns the success/fail message.
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PasswordChange'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PasswordChange'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PasswordChange'
        required: true
      security:
      - jwtHeaderAuth: []
      - jwtCookieAuth: []
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestAuthDetail'
          description: ''
  /api/users/password/reset/:
    post:
      operationId: api_users_password_reset_create
      description: |-
        Calls Django Auth PasswordResetForm save method.

        Accepts the following POST parameters: email
        Returns the success/fail message.
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PasswordReset'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PasswordReset'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PasswordReset'
        required: true
      security:
      - jwtHeaderAuth: []
      - jwtCookieAuth: []
      - jwtAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestAuthDetail'
          description: ''
  /api/users/password/reset/confirm/:
    post:
      operationId: api_users_password_reset_confirm_create
      description: |-
        Password reset e-mail link is confirmed, therefore
        this resets the user's password.

        Accepts the following POST parameters: token, uid,
            new_password1, new_password2
        Returns the success/fail message.
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PasswordResetConfirm'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PasswordResetConfirm'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PasswordResetConfirm'
        required: true
      security:
      - jwtHeaderAuth: []
      - jwtCookieAuth: []
      - jwtAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestAuthDetail'
          description: ''
  /api/users/registration/:
    post:
      operationId: api_users_registration_create
      description: |-
        Registers a new user.

        Accepts the following POST parameters: username, email, password1, password2.
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CustomRegister'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/CustomRegister'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/CustomRegister'
        required: true
      security:
      - jwtHeaderAuth: []
      - jwtCookieAuth: []
      - jwtAuth: []
      - {}
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomRegister'
          description: ''
  /api/users/registration/resend-email/:
    post:
      operationId: api_users_registration_resend_email_create
      description: This view resends the email verification link if user didn't get
        it originally.
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ResendEmailVerification'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/ResendEmailVerification'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ResendEmailVerification'
        required: true
      security:
      - jwtHeaderAuth: []
      - jwtCookieAuth: []
      - jwtAuth: []
      - {}
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResendEmailVerification'
          description: ''
  /api/users/registration/verify-email/:
    post:
      operationId: api_users_registration_verify_email_create
      description: |-
        Verifies the email associated with the provided key.

        Accepts the following POST parameter: key.
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/VerifyEmail'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/VerifyEmail'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/VerifyEmail'
        required: true
      security:
      - jwtHeaderAuth: []
      - jwtCookieAuth: []
      - jwtAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestAuthDetail'
          description: ''
  /api/users/social/facebook/:
    post:
      operationId: api_users_social_facebook_create
      description: |-
        class used for social authentications
        example usage for facebook with access_token
        -------------
        from allauth.socialaccount.providers.facebook.views import FacebookOAuth2Adapter

        class FacebookLogin(SocialLoginView):
            adapter_class = FacebookOAuth2Adapter
        -------------

        example usage for facebook with code

        -------------
        from allauth.socialaccount.providers.facebook.views import FacebookOAuth2Adapter
        from allauth.socialaccount.providers.oauth2.client import OAuth2Client

        class FacebookLogin(SocialLoginView):
            adapter_class = FacebookOAuth2Adapter
            client_class = OAuth2Client
            callback_url = 'localhost:8000'
        -------------
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SocialLogin'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/SocialLogin'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/SocialLogin'
      security:
      - jwtHeaderAuth: []
      - jwtCookieAuth: []
      - jwtAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SocialLogin'
          description: ''
  /api/users/social/google/:
    post:
      operationId: api_users_social_google_create
      description: |-
        class used for social authentications
        example usage for facebook with access_token
        -------------
        from allauth.socialaccount.providers.facebook.views import FacebookOAuth2Adapter

        class FacebookLogin(SocialLoginView):
            adapter_class = FacebookOAuth2Adapter
        -------------

        example usage for facebook with code

        -------------
        from allauth.socialaccount.providers.facebook.views import FacebookOAuth2Adapter
        from allauth.socialaccount.providers.oauth2.client import OAuth2Client

        class FacebookLogin(SocialLoginView):
            adapter_class = FacebookOAuth2Adapter
            client_class = OAuth2Client
            callback_url = 'localhost:8000'
        -------------
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SocialLogin'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/SocialLogin'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/SocialLogin'
      security:
      - jwtHeaderAuth: []
      - jwtCookieAuth: []
      - jwtAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SocialLogin'
          description: ''
  /auth/login/:
    post:
      operationId: auth_login_create
      description: 'Optional: Override if you want to trigger 2FA email OTP after
        login.'
      tags:
      - auth
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Login'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Login'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Login'
        required: true
      security:
      - jwtHeaderAuth: []
      - jwtCookieAuth: []
      - jwtAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Login'
          description: ''
  /auth/registration/:
    post:
      operationId: auth_registration_create
      description: |-
        Registers a new user.

        Accepts the following POST parameters: username, email, password1, password2.
      tags:
      - auth
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Register'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Register'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Register'
        required: true
      security:
      - jwtHeaderAuth: []
      - jwtCookieAuth: []
      - jwtAuth: []
      - {}
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Token'
          description: ''
  /auth/registration/resend-email/:
    post:
      operationId: auth_registration_resend_email_create
      description: |-
        Resends another email to an unverified email.

        Accepts the following POST parameter: email.
      tags:
      - auth
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ResendEmailVerification'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/ResendEmailVerification'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ResendEmailVerification'
        required: true
      security:
      - jwtHeaderAuth: []
      - jwtCookieAuth: []
      - jwtAuth: []
      - {}
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestAuthDetail'
          description: ''
  /auth/registration/verify-email/:
    post:
      operationId: auth_registration_verify_email_create
      description: |-
        Verifies the email associated with the provided key.

        Accepts the following POST parameter: key.
      tags:
      - auth
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/VerifyEmail'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/VerifyEmail'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/VerifyEmail'
        required: true
      security:
      - jwtHeaderAuth: []
      - jwtCookieAuth: []
      - jwtAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestAuthDetail'
          description: ''
  /auth/token/refresh/:
    post:
      operationId: auth_token_refresh_create
      description: |-
        Takes a refresh type JSON web token and returns an access type JSON web
        token if the refresh token is valid.
      tags:
      - auth
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TokenRefresh'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/TokenRefresh'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/TokenRefresh'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenRefresh'
          description: ''
  /auth/token/verify/:
    post:
      operationId: auth_token_verify_create
      description: |-
        Takes a token and indicates if it is valid.  This view provides no
        information about a token's fitness for a particular use.
      tags:
      - auth
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TokenVerify'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/TokenVerify'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/TokenVerify'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenVerify'
          description: ''
components:
  schemas:
    CustomRegister:
      type: object
      properties:
        username:
          type: string
          maxLength: 150
          minLength: 1
        email:
          type: string
          format: email
        password1:
          type: string
          writeOnly: true
        password2:
          type: string
          writeOnly: true
        referral_code:
          type: string
      required:
      - email
      - password1
      - password2
      - username
    Login:
      type: object
      properties:
        username:
          type: string
        email:
          type: string
          format: email
        password:
          type: string
      required:
      - password
    PasswordChange:
      type: object
      properties:
        new_password1:
          type: string
          maxLength: 128
        new_password2:
          type: string
          maxLength: 128
      required:
      - new_password1
      - new_password2
    PasswordReset:
      type: object
      description: Serializer for requesting a password reset e-mail.
      properties:
        email:
          type: string
          format: email
      required:
      - email
    PasswordResetConfirm:
      type: object
      description: Serializer for confirming a password reset attempt.
      properties:
        new_password1:
          type: string
          maxLength: 128
        new_password2:
          type: string
          maxLength: 128
        uid:
          type: string
        token:
          type: string
      required:
      - new_password1
      - new_password2
      - token
      - uid
    Register:
      type: object
      properties:
        username:
          type: string
          maxLength: 150
          minLength: 1
        email:
          type: string
          format: email
        password1:
          type: string
          writeOnly: true
        password2:
          type: string
          writeOnly: true
      required:
      - email
      - password1
      - password2
      - username
    ResendEmailVerification:
      type: object
      properties:
        email:
          type: string
          format: email
      required:
      - email
    RestAuthDetail:
      type: object
      properties:
        detail:
          type: string
          readOnly: true
      required:
      - detail
    SocialLogin:
      type: object
      properties:
        access_token:
          type: string
        code:
          type: string
        id_token:
          type: string
    Token:
      type: object
      description: Serializer for Token model.
      properties:
        key:
          type: string
          maxLength: 40
      required:
      - key
    TokenRefresh:
      type: object
      properties:
        access:
          type: string
          readOnly: true
        refresh:
          type: string
      required:
      - access
      - refresh
    TokenVerify:
      type: object
      properties:
        token:
          type: string
          writeOnly: true
      required:
      - token
    VerifyEmail:
      type: object
      properties:
        key:
          type: string
          writeOnly: true
      required:
      - key
  securitySchemes:
    jwtAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
    jwtCookieAuth:
      type: apiKey
      in: cookie
      name: jwt-auth
    jwtHeaderAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
